name: Create Dev Staging Environment

on:
  workflow_dispatch:
    inputs:
      PR_number:
        description: 'Pull request number'
        required: true

permissions:
  pull-requests: write
  contents: write
  issues: write

jobs:
  create:
    name: 'Create staging and deploy'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Verify Pull Request Number
      uses: actions/github-script@v5
      id: verify_pr_number
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: Number("${{ github.event.inputs.PR_number }}")
          });
          return pr.data.head.ref;

    - uses: actions/checkout@v2
      name: 'Checkout infra branch'
      with:
        ref: infra

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: "~> 1.5"
        cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}

    - name: 'Create staging environment resource file'
      id: create_resource_file
      working-directory: infra/instances/staging/
      run: |
        OUTPUT=$(./create_staging_resource.sh PR_${{ github.event.inputs.PR_number }})
        RESOURCE_NAME=$(echo "$OUTPUT" | jq -r .terraform_expected_output)
        echo "STAGING_RESOURCE_NAME=$RESOURCE_NAME" >> $GITHUB_ENV

    - name: Terraform Init and Validate
      working-directory: infra/instances/staging/
      run: |
        terraform init
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      working-directory: infra/instances/staging/
      run: terraform plan -no-color
      continue-on-error: true

    - name: Update PR with Terraform Plan
      uses: actions/github-script@v5
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n${process.env.PLAN}\n\`\`\`
          </details>
          *Triggered by @${{ github.actor }}*`;
          await github.rest.issues.createComment({
            issue_number: Number("${{ github.event.inputs.PR_number }}"),
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      id: apply
      working-directory: infra/instances/staging/
      run: terraform apply -auto-approve

    - name: Terraform Output
      id: apply_output
      working-directory: infra/instances/staging/
      run: |
        DNS=$(terraform output -raw -no-color $STAGING_RESOURCE_NAME)
        echo "STAGING_DNS=$DNS" >> $GITHUB_ENV

    - name: Commit terraform resource files to the PR
      working-directory: infra/instances/staging/
      run: |
        git config --global user.name '${{ github.actor }}'
        git config --global user.email '${{ github.actor }}@users.noreply.github.com'
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git add *.tf
        git commit -m "Add terraform resource files" && git push || echo "Nothing to commit"

    - name: Checkout PR branch
      uses: actions/checkout@v2
      with:
        ref: ${{ steps.verify_pr_number.outputs.result }}

    - uses: burnett01/rsync-deployments@23a557dceb19f9bb960ef40cf75cab5e9b37ec1f
      name: 'Deploy to staging'
      with:
        switches: -avzr --delete
        path: ./web
        remote_path: /var/app
        remote_host: ${{ env.STAGING_DNS }}
        remote_user: ${{ secrets.REMOTE_USER }}
        remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

    - uses: JimCronqvist/action-ssh@7737f1192ddd8376686e9d6354dea44592c942bf
      name: Execute SSH commands
      with:
        hosts: '${{ secrets.REMOTE_USER }}@${{ env.STAGING_DNS }}'
        privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
        command: |
          cd /var/app/web
          npm ci
          pm2 start /var/app/web/bin/www || pm2 restart /var/app/web/bin/www
          sudo service nginx restart

    - name: Update status
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Staging server created
          > PR #${{ github.event.inputs.PR_number }} deployed successfully

          🌐 http://${{ env.STAGING_DNS }}`;
          github.rest.issues.createComment({
            issue_number: Number("${{ github.event.inputs.PR_number }}"),
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
